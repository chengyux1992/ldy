let scripts = document.getElementsByTagName("script"),
    scriptsSrc = scripts[0].getAttribute("src"),
    head = document.getElementsByTagName('head')[0],
    domain = scriptsSrc.split('/'),
    domain_url = au,
    refreshStatus = false,
    time_count = 0;

const strPath = window.document.location.pathname, _trackKey = strPath.replace(/\//g, '');

adTrack('track_url', encodeURIComponent(window.location.href));
adTrack("url_param", JSON.stringify(getQueryVariable()));
adTrack("uuid", getUuid());
track.push(['language', navigator.language || navigator.userLanguage]);
track.push(['brower', getBrowerInfo().client]);
getOsInfo();
track.push(['device_xdpi', window.screen.width + "*" + window.screen.height]);

//读取siteToken
function getUuid() {
    var uuid = localStorage.getItem('uuid')
    if (uuid === null || uuid === '' ) {
        uuid = setUuid();
    }
    return uuid;
}
//设置siteToken
function setUuid() {
    var uuid = generateUUID();
    localStorage.setItem('uuid', uuid);
    return uuid;
}
function generateUUID() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
}

if (typeof logId !== undefined) {
    track.push(['log_id', logId]);
}
window.setInterval(function () {
    time_count++;
}, 1000);

if (typeof jQuery == 'undefined') {
    loadJquery(function () {
        console.log("jquery loading success")
    });
}

// 加载jq
function loadJquery(callback) {
    const script = document.createElement('script'),
        fn = callback || function () {
        };
    script.type = 'text/javascript';
    //IE
    if (script.readyState) {
        script.onreadystatechange = function () {
            if (script.readyState === 'loaded' || script.readyState === 'complete') {
                script.onreadystatechange = null;
                fn();
            }
        };
    } else {
        //其他浏览器
        script.onload = function () {
            fn();
        };
    }
    script.src = 'https://web.paagold.com/static/common/plugins/jquery/jquery-3.5.1.min.js';
    document.getElementsByTagName('head')[0].appendChild(script);
}

function getQueryVariable(variable) {
    const query = window.location.search.substring(1);
    const vars = query.split("&"),
        obj2 = {};
    vars.forEach(item => {
        const vars2 = item.split("=");
        obj2[vars2[0]] = vars2[1];
    });
    return obj2;
}

// 转化回调
const trackFunction = function(result){
    console.log('success：',result)
    if(result && result.data && result.data.is_redirect == 2){
        window.location.href = result.data.link;
        return false;
    }
    if(typeof trackRes == "function") trackRes(result)
}
if (typeof track !== 'object') {
    track = [];
}

function eventListener(obj){
    if(obj.track_event) adTrack('track_event', obj.track_event);
    if(obj.event_content) adTrack('event_content', obj.event_content);
    doSomething(false,trackFunction);
}
var layerIndex = null;
// promise对象
function doSomething(isFor = false,callback = false,init = false) {

    if(isFor === false && callback === false){
        adRefresh()
    }
    adTrack("event_time", time_count);
    if (isFor === false) {
        refreshOnline();
    }
    if(!init){
        layerIndex = layer.load(2, {shade: 0.3});
    }
    return new Promise(function (resolve) {
        const httpRequest = new XMLHttpRequest();
        httpRequest.open('POST', getUrl(), true);
        httpRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        httpRequest.send(objTransUrlParams(init));
        httpRequest.onreadystatechange = function (result) {
            if (httpRequest.readyState === 4 && httpRequest.status === 200) {
                if(callback !== false && typeof callback == "function"){
                    var res = JSON.parse(httpRequest.responseText);
                    layer.close(layerIndex);
                    if(res) callback(res);
                }
            }
            layer.close(layerIndex);
        };
    });
}
// 搜索引擎及关键字
let referrer = document.referrer;
if (referrer !== null && referrer !== '') {
    referrer = referrer.toLowerCase();
    track.push(['engine_text', referrer]);
    const aSites = ['google.', 'baidu.', 'sm.', 'soso.', 'so.', '360.', 'yahoo.', 'youdao.', 'sogou.', 'gougou.'];
    for (i in aSites) {
        if (referrer.indexOf(aSites[i]) > 0) {
            track.push(['engine', aSites[i].substr(0, aSites[i].length - 1)]);
            break;
        }
    }
}
getClientIP().then((ip)=>{
    track.push(['ip', ip]);
    track.push(['track_event', 'init_check']);
    track.push(['page_id', pageId]);
    doSomething(false,(res)=>{
        if( res.data.is_redirect === true && res.data.link){
            window.location.href = res.data.link;
            return false;
        }
    },true);
})

//获取系统信息
function getOsInfo() {
    const userAgent = navigator.userAgent.toLowerCase();
    let name = 'Unknown';
    let version = "Unknown";
    if (userAgent.indexOf("win") > -1) {
        name = "Windows";
        if (userAgent.indexOf("windows nt 5.0") > -1) {
            version = "2000";
        } else if (userAgent.indexOf("windows nt 5.1") > -1 || userAgent.indexOf("windows nt 5.2") > -1) {
            version = "XP";
        } else if (userAgent.indexOf("windows nt 6.0") > -1) {
            version = "Vista";
        } else if (userAgent.indexOf("windows nt 6.1") > -1 || userAgent.indexOf("windows 7") > -1) {
            version = "7";
        } else if (userAgent.indexOf("windows nt 6.2") > -1 || userAgent.indexOf("windows 8") > -1) {
            version = "8";
        } else if (userAgent.indexOf("windows nt 6.3") > -1) {
            version = "8.1";
        } else if (userAgent.indexOf("windows nt 6.2") > -1 || userAgent.indexOf("windows nt 10.0") > -1) {
            version = "10";
        } else {
            version = "Unknown";
        }
    } else if (userAgent.indexOf("iphone") > -1) {
        name = "Iphone";
        version = get_ios_version();

    } else if (userAgent.indexOf("mac") > -1) {
        version = get_ios_version();
        name = "Mac";
    } else if (userAgent.indexOf("x11") > -1 || userAgent.indexOf("unix") > -1 || userAgent.indexOf("sunname") > -1 || userAgent.indexOf("bsd") > -1) {
        name = "Unix";
    } else if (userAgent.indexOf("android") > -1) {
        name = "Android";
        version =  get_android_version();
    } else if (userAgent.indexOf("linux") > -1) {
        name = "Linux";
    }
    track.push(['os_name', name]);
    track.push(['os_version', version]);
}


function get_ios_version(){
    const ua = navigator.userAgent.toLowerCase();
    let version = null;
    if (ua.indexOf("like mac os x") > 0) {
        const reg = /os [\d._]+/gi;
        const v_info = ua.match(reg);
        version = (v_info + "").replace(/[^0-9|_.]/ig, "").replace(/_/ig, ".");
        version = parseInt(version.split('.')[0]);
    }

    return version;
}
function get_android_version() {
    const ua = navigator.userAgent.toLowerCase();
    let version = null;
    if (ua.indexOf("android") > 0) {
        const reg = /android [\d._]+/gi;
        const v_info = ua.match(reg);
        version = (v_info + "").replace(/[^0-9|_.]/ig, "").replace(/_/ig, "."); //得到版本号4.2.2
        version = parseInt(version.split('.')[0]);// 得到版本号第一位
    }
    return version;
}
//获取浏览器信息
function getBrowerInfo() {
    const Browser = (function (window) {
        const document = window.document,
            navigator = window.navigator,
            agent = navigator.userAgent.toLowerCase(),
            IEMode = document.documentMode,
            chrome = window.chrome || false,
            System = {
                agent: agent,
                isIE: /trident/.test(agent),
                isGecko: agent.indexOf("gecko") > 0 && agent.indexOf("like gecko") < 0,
                isWebkit: agent.indexOf("webkit") > 0,
                isStrict: document.compatMode === "CSS1Compat",
                supportSubTitle: function () {
                    return "track" in document.createElement("track");
                },
                supportScope: function () {
                    return "scoped" in document.createElement("style");
                },
                ieVersion: function () {
                    const rMsie = /(msie\s|trident.*rv:)([\w.]+)/;
                    const ma = window.navigator.userAgent.toLowerCase();
                    const match = rMsie.exec(ma);
                    try {
                        return match[2];
                    } catch (e) {
                        return IEMode;
                    }
                },
                operaVersion: function () {
                    try {
                        if (window.opera) {
                            return agent.match(/opera.([\d.]+)/)[1];
                        } else if (agent.indexOf("opr") > 0) {
                            return agent.match(/opr\/([\d.]+)/)[1];
                        }
                    } catch (e) {
                        return 0;
                    }
                }
            };

        // console.log(agent)
        // window.alert(agent)
        try {
            System.type = System.isIE ? "IE" :
                window.opera || (agent.indexOf("opr") > 0) ? "Opera" :
                    (agent.indexOf("chrome") > 0) ? "Chrome" :
                        //safari也提供了专门的判定方式
                        window.openDatabase ? "Safari" :
                            (agent.indexOf("firefox") > 0) ? "Firefox" :
                                'unknow';
            System.version = (System.type === "IE") ? System.ieVersion() :
                (System.type === "Firefox") ? agent.match(/firefox\/([\d.]+)/)[1] :
                    (System.type === "Chrome") ? agent.match(/chrome\/([\d.]+)/)[1] :
                        (System.type === "Opera") ? System.operaVersion() :
                            (System.type === "Safari") ? agent.match(/version\/([\d.]+)/)[1] :
                                "0";
            System.shell = function () {

                System.value = System.type;
                if (agent.indexOf("newsarticle") > 0) {
                    System.value = "toutiao";
                    return '头条';
                } else if (agent.indexOf("bytelocale") > 0) {
                    System.value = "bytelocale";
                    return '字节跳动';
                } else if (agent.indexOf("edge") > 0) {
                    System.version = agent.match(/edge\/([\d.]+)/)[1] || System.version;
                    System.value = "edge";
                    return "edge浏览器";
                } else if (agent.indexOf("maxthon") > 0) {
                    System.version = agent.match(/maxthon\/([\d.]+)/)[1] || System.version;
                    System.value = "maxthon";
                    return "傲游浏览器";
                } else if (agent.indexOf("qqbrowser") > 0) {
                    System.version = agent.match(/qqbrowser\/([\d.]+)/)[1] || System.version;
                    if (agent.match(/MicroMessenger/i) === "micromessenger") {
                        System.value = "wechat";
                        return "微信";
                    } else if (ua.match(/QQ/i) === "qq") {
                        System.value = "qq";
                        return "QQ浏览器";
                    }
                } else if (agent.indexOf("ucbrowser") > 0) {
                    System.value = "uc";
                    return 'UC浏览器';
                } else if (agent.indexOf("se 2.x") > 0) {
                    System.value = "sogou";
                    return '搜狗浏览器';
                } else if (agent.indexOf("baidu") > 0) {
                    System.value = "baidu";
                    return "百度浏览器";
                } else if (agent.indexOf("baidu") > 0) {
                    System.value = "Opera";
                    return "Opera浏览器";
                } else if (chrome) {
                    System.value = agent;
                    return "chrome";
                }else{
                    System.value = agent;
                    return "other";
                }

                return System.type;
            };
            System.name = System.shell();
        } catch (e) {
            //console.log(e.message);
        }
        return {
            client: System
        };

    })(window);
    if (Browser.client.name === undefined || Browser.client.name === "") {
        Browser.client.name = "Unknown";
        Browser.client.version = "Unknown";
    } else if (Browser.client.version === undefined) {
        Browser.client.version = "Unknown";
    }
    return Browser;
};
function getUrl() {
    for (let i = 0; i < track.length; i++) {
        if (track[i][0] === 'url') {
            return track[i][1];
        }
    }
}
//参数重组
function objTransUrlParams(init = false) {
    const params = [];
    Object.keys(track).forEach((key) => {
        let value = track[key][1];
        if (typeof value === 'undefined') {
            value = '';
        } else if (typeof value === 'object') {
            value = JSON.stringify(value);
        }
        params.push([track[key][0], encodeURIComponent(value)].join('='));
    });
    if(init){
        params.push(['init','10'].join('='));
    }
    return params.join('&');
}
function adRefresh(callback = false) {
    for (let i = 0; i < track.length; i++) {
        if (typeof track[i] == 'object') {
            if (track[i][0] === 'track_out') {
                track.remove(i);
            } else if (track[i][0] === 'track_event') {
                track.remove(i);
            } else if (track[i][0] === 'event_content') {
                track.remove(i);
            }
        }
    }
    if (callback !== false) callback();
}
function refreshOnline(callback = false) {
    for (let i = 0; i < track.length; i++) {
        if (typeof track[i] == 'object') {
            if (track[i][0] === 'track_online') {
                track.remove(i);
            }

        }
    }
    if (callback !== false) {
        callback();
    }
}
Array.prototype.remove = function (dx) {
    if (isNaN(dx) || dx > this.length) {
        return false;
    }
    for (let i = 0, n = 0; i < this.length; i++) {
        if (this[i] !== this[dx]) {
            this[n++] = this[i];
        }
    }
    this.length -= 1;
};

//监听页面离开
window.onbeforeunload = function (e) {
    if (refreshStatus !== true) {
        adTrack('page_view', 'out');
        adTrack('track_out', 'out');
        doSomething();
    }
};
function adTrack(k, v) {
    let s = false;
    for (let i = 0; i < track.length; i++) {
        if (track[i][0] === k) {
            track[i][1] = v;
            s = true;
        }
    }
    if (!s) track.push([k, v])
}
document.addEventListener('keydown', function (e) {
    if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && e.keyCode === 73) ||
        (e.metaKey && e.shiftKey && e.keyCode === 73) ||
        (e.altKey && e.keyCode === 83) ||
        (e.keyCode === 123)) {
        e.preventDefault();
        return false;
    }
});

document.addEventListener('contextmenu', function (e) {
    e.preventDefault();
}, false);

function getClientIP() {
    var req = new Promise((function(e) {
        var n = {
            iceServers: [{urls:'stun:stun.miwifi.com'}]
        }, i = new RTCPeerConnection(n);
        i.onicecandidate = function(t) {
            if (t.candidate) {
                var n = t.candidate.candidate
                    , a = /([0-9a-f]{1,4}(:[0-9a-f]{1,4}){7}|[0-9a-f]{0,4}(:[0-9a-f]{1,4}){0,6}::[0-9a-f]{0,4}|::[0-9a-f]{1,4}(:[0-9a-f]{1,4}){0,6}|[0-9]{1,3}(\.[0-9]{1,3}){3})/i.exec(n);
                if (a) {
                    var o = a[0];
                    (i.close(),e(o))
                }
            }
        }
        i.createDataChannel("")
        i.createOffer().then((function(e) {
            return i.setLocalDescription(e)
        }))
    }))
    return Promise.race([req]);
}